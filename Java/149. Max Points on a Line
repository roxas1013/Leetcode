class Solution {
    public int maxPoints(int[][] points) {
        if(points.length < 2) return  points.length;
        int n = points.length;
        Set<String> s = new HashSet<>();
        int max = 1;
        for(int i = 0; i < n &&  !s.contains(points[i][0] +"-"+ points[i][1]);i++){
             int [] a = points[i];
             Map<Double,Integer> map = new HashMap();
             int same = 0 ;
             int local = 1;
             for(int j = i + 1; j<n;j++){
                 if(isSame(a,points[j])){
                     same ++;
                     continue;
                 }
                double slope = getSlope(a,points[j]);
                map.put(slope,map.getOrDefault(slope, 1)+1);
                local = Math.max(local, map.get(slope));

             }
             s.add(a[0] +"-"+a[1]);
             max= Math.max(max,local + same);
        }
        return max;
    }
    private boolean isSame(int [] a , int [] b){
        return a[0]==b[0] && a[1]==b[1];
    }
    private double getSlope(int [] a ,int [] b){
        if(a[0] == b[0]) return Double.MAX_VALUE;
        if(a[1] == b[1]) return 0;
        return ((double)a[0] - b[0])/((double) a[1] - b[1]);
    }
}
