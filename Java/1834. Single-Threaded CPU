class Solution {
    public int[] getOrder(int[][] tasks) {
        int n = tasks.length;
        int [] ans = new int [n];
        PriorityQueue<int []> pd = new PriorityQueue<int []>(new Comparator<int[]>(){
            public int compare(int []a, int []b){
                if(a[1] != b[1]) return a[1] - b[1];
                return a[2] - b[2];
             }
        });
        int [][] nt = new int [n][3];
        for(int i = 0; i < n;i++){
            nt[i][0] = tasks[i][0];
            nt[i][1] = tasks[i][1];
            nt[i][2] = i;
        }
        Arrays.sort(nt,(t1,t2) -> t1[0] - t2[0] );
        int t = 0,index = 0,i = 0;
        while(index < n ){
            if(pd.isEmpty()) t= Math.max(t,nt[i][0]);
            while(i < n && nt[i][0] <= t){
                    pd.offer(nt[i++]);
            }
            int [] task = pd.poll();
            ans[index++] = task[2];
            t += task[1];

        }
        return ans;
    }
}
